/**
 * sainternet.xyz - resources/javascript/serviceworker.min.js
 * Copyright 2022 saint-lascivious (Hayden Pearce). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
 * Remember to update name and version in debug.min.js also
 *
 * Used in deleteServiceWorkerCaches function to whitelist the current cache
 */
const pwaName = 'sainternet';
const pwaVersion = '_v13';
const cacheName = `${pwaName}${pwaVersion}`;

const baseDomain = 'https://sainternet.xyz';

const appURLS = [
  `${baseDomain}/sainternet.webmanifest`,
];

const cssURLS = [
  `${baseDomain}/resources/fontawesome-free-6.3.0-web/css/brands-stripped.min.css`,
  `${baseDomain}/resources/fontawesome-free-6.3.0-web/css/fontawesome-stripped.min.css`,
  `${baseDomain}/resources/fontawesome-free-6.3.0-web/css/solid.min.css`,
  `${baseDomain}/resources/stylesheets/button_home.min.css`,
  `${baseDomain}/resources/stylesheets/datetime.min.css`,
  `${baseDomain}/resources/stylesheets/img.min.css`,
  `${baseDomain}/resources/stylesheets/material.amber-red.min.css`,
  // `${baseDomain}/resources/stylesheets/material.blue_grey-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.blue-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.brown-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.cyan-red.min.css`,
  // `${baseDomain}/resources/stylesheets/material.deep_orange-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.deep_purple-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.green-red.min.css`,
  // `${baseDomain}/resources/stylesheets/material.grey-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.indigo-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.light_blue-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.light_green-red.min.css`,
  // `${baseDomain}/resources/stylesheets/material.lime-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.orange-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.pink-red.min.css`,
  // `${baseDomain}/resources/stylesheets/material.purple-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.red-blue.min.css`,
  `${baseDomain}/resources/stylesheets/material.teal-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.yellow-red.min.css`,
  `${baseDomain}/resources/stylesheets/pre.min.css`,
  `${baseDomain}/resources/stylesheets/ribbons.min.css`,
  `${baseDomain}/resources/stylesheets/sainternet.min.css`,
  `${baseDomain}/resources/stylesheets/table.min.css`,
];

const fontURLS = [
  // `${baseDomain}/resources/fontawesome-free-6.3.0-web/webfonts/fa-brands-400.ttf`,
  `${baseDomain}/resources/fontawesome-free-6.3.0-web/webfonts/fa-brands-400.woff2`,
  // `${baseDomain}/resources/fontawesome-free-6.3.0-web/webfonts/fa-solid-900.ttf`,
  `${baseDomain}/resources/fontawesome-free-6.3.0-web/webfonts/fa-solid-900.woff2`,
];

const htmlURLS = [
  `${baseDomain}/`,
  `${baseDomain}/265.html`,
  `${baseDomain}/404.html`,
  `${baseDomain}/connecttosainternet.html`,
  `${baseDomain}/debug.html`,
  `${baseDomain}/filtereddns.html`,
  `${baseDomain}/frequentlyaskedquestions.html`,
  `${baseDomain}/index.html`,
  `${baseDomain}/newsandupdates.html`,
  `${baseDomain}/pokedexoverdns.html`,
  `${baseDomain}/portsandprotocols.html`,
  `${baseDomain}/projects.html`,
  `${baseDomain}/reportaproblem.html`,
  `${baseDomain}/technologies.html`,
  `${baseDomain}/testsainternet.html`,
];

const iconURLS = [
  `${baseDomain}/favicon.ico`,
  `${baseDomain}/resources/icons/android-chrome-192x192.png`,
  // `${baseDomain}/resources/icons/android-chrome-256x256.png`,
  `${baseDomain}/resources/icons/android-chrome-265-192x192.png`,
  // `${baseDomain}/resources/icons/android-chrome-265-256x256.png`,
  `${baseDomain}/resources/icons/android-chrome-404-192x192.png`,
  // `${baseDomain}/resources/icons/android-chrome-404-256x256.png`,
  // `${baseDomain}/resources/icons/favicon-16x16.png`,
  // `${baseDomain}/resources/icons/favicon-265-16x16.png`,
  `${baseDomain}/resources/icons/favicon-265-32x32.png`,
  // `${baseDomain}/resources/icons/favicon-265-48x48.png`,
  `${baseDomain}/resources/icons/favicon-265.ico`,
  `${baseDomain}/resources/icons/favicon-32x32.png`,
  // `${baseDomain}/resources/icons/favicon-404-16x16.png`,
  `${baseDomain}/resources/icons/favicon-404-32x32.png`,
  // `${baseDomain}/resources/icons/favicon-404-48x48.png`,
  `${baseDomain}/resources/icons/favicon-404.ico`,
  // `${baseDomain}/resources/icons/favicon-48x48.png`,
  // `${baseDomain}/resources/icons/filtereddns-192x192.png`,
  // `${baseDomain}/resources/icons/mstile-144x144.png`,
  // `${baseDomain}/resources/icons/newsandupdates-192x192.png`,
  // `${baseDomain}/resources/icons/pokedexoverdns-192x192.png`,
  // `${baseDomain}/resources/icons/projects-192x192.png`,
  // `${baseDomain}/resources/icons/pwa-maskable-128x128.png`,
  // `${baseDomain}/resources/icons/pwa-maskable-192x192.png`,
  // `${baseDomain}/resources/icons/pwa-maskable-384x384.png`,
  // `${baseDomain}/resources/icons/pwa-maskable-48x48.png`,
  // `${baseDomain}/resources/icons/pwa-maskable-512x512.png`,
  // `${baseDomain}/resources/icons/pwa-maskable-72x72.png`,
  // `${baseDomain}/resources/icons/pwa-maskable-96x96.png`,
];

const imageURLS = [
  // `${baseDomain}/resources/images/luxio.jpg`,
  // `${baseDomain}/resources/images/luxio.png`,
  // `${baseDomain}/resources/images/luxio-shiny.jpg`,
  // `${baseDomain}/resources/images/luxio-shiny.png`,
  `${baseDomain}/resources/images/luxio-shiny.webp`,
  `${baseDomain}/resources/images/luxio.webp`,
  // `${baseDomain}/resources/images/terminal.jpg`,
  // `${baseDomain}/resources/images/terminal.png`,
  `${baseDomain}/resources/images/terminal.webp`,
  // `${baseDomain}/resources/images/wurmple.jpg`,
  // `${baseDomain}/resources/images/wurmple.png`,
  // `${baseDomain}/resources/images/wurmple-shiny.jpg`,
  // `${baseDomain}/resources/images/wurmple-shiny.png`,
  `${baseDomain}/resources/images/wurmple-shiny.webp`,
  `${baseDomain}/resources/images/wurmple.webp`,
];

const jsURLS = [
  `${baseDomain}/resources/javascript/debug.min.js`,
  `${baseDomain}/resources/javascript/load_fonts.min.js`,
  `${baseDomain}/resources/javascript/material.min.js`,
  `${baseDomain}/resources/javascript/random_phrase.min.js`,
  `${baseDomain}/resources/javascript/tag_manager.min.js`,
  `${baseDomain}/resources/javascript/toggle_drawer.min.js`,
  `${baseDomain}/sainternet.min.js`,
  `${baseDomain}/serviceworker.min.js`,
];

const allURLS = [
  ...appURLS,
  ...cssURLS,
  ...fontURLS,
  ...htmlURLS,
  ...iconURLS,
  ...imageURLS,
  ...jsURLS,
];

/**
 * Adds all URLs in `allURLS` to the `cacheName` cache.
 *
 * @function
 * @name handlePeriodicUpdate
 */
function handlePeriodicUpdate() {
  // "use strict";
  caches.open(cacheName).then(function(cache) {
    logDebugMessage(`[Service Worker] Updating cache: ${cacheName}`);
    return cache.addAll(allURLS);
  });
}

/**
 * Calls `handlePeriodicUpdate` every 24 hours using `setInterval`.
 *
 * @returns {number} The ID value of the interval timer.
 */
setInterval(handlePeriodicUpdate, 24 * 60 * 60 * 1000);


/**
 * Logs debug messages
 *
 * @function
 * @name logDebugMessage
 * @param {string} message - The debug message to log.
 * @param {string} [logType='log'] - The type of console method to use for
 * logging the message (e.g. 'log', 'info', 'warn', 'error').
 * @return {void}
 */
function logDebugMessage(message, logType = 'log') {
  // "use strict";
  console[logType](message);
}

/**
 * Event listener for the 'install' event. This listener is triggered when the
 * service worker is first installed.
 *
 * @param {ExtendableEvent} event - The event object for the 'install' event.
 */
self.addEventListener('install', function(event) {
  // "use strict";
  logDebugMessage(`[Service Worker] Event: install`);
  try {
    self.skipWaiting();
    event.waitUntil(
      caches.open(cacheName).then(function(cache) {
        logDebugMessage(`[Service Worker] Installing cache: ${cacheName}`);
        return cache.addAll(allURLS);
      })
    );
  } catch (error) {
    logDebugMessage(`[Service Worker] Error during install event: ${error}`, 'error');
  }
});

/**
 * Event listener for the 'activate' event of the service worker.
 *
 * @param {ExtendableEvent} event - The event object for the 'activate' event.
 */
self.addEventListener('activate', function(event) {
  // "use strict";
  logDebugMessage(`[Service Worker] Event: activate`);
  try {
    if (self.clients && clients.claim) {
      logDebugMessage(`[Service Worker] Claiming available clients`);
      clients.claim();
    }
    event.waitUntil(
      caches.keys().then(function(keyList) {
        const cacheWhitelist = keyList.filter(function(key) {
          return key.indexOf(pwaName);
        });
        logDebugMessage(`[Service Worker] Whitelisting current cache: ${cacheName}`);
        cacheWhitelist.push(cacheName);
        return Promise.all(keyList.map(function(key, i) {
          if (cacheWhitelist.indexOf(key) === -1) {
            logDebugMessage(`[Service Worker] Deleting orphaned cache: ${keyList[i]}`);
            return caches.delete(keyList[i]);
          }
        }));
      })
    );
  } catch (error) {
    logDebugMessage(`[Service Worker] Error during activate event: ${error}`, 'error');
  }
});

/**
 * Simple event listener for the fetch event with a cache first policy.
 *
 * @param {ExtendableEvent} event - The event object for the 'fetch' event.
 */
self.addEventListener('fetch', function(event) {
  // "use strict";
  try {
    console.log(`[Service Worker] Fetch request: ${event.request.url}`);
    event.respondWith(
      caches.match(event.request).then(function(request) {
        if (request) {
          logDebugMessage(`[Service Worker] Responding from cache: ${event.request.url}`);
          return request;
        } else {
          logDebugMessage(`[Service Worker] Resource not cached, fetching: ${event.request.url}`);
          return fetch(event.request);
        }
      })
    );
  } catch (error) {
    logDebugMessage(`[Service Worker] Error during fetch event: ${error}`, 'error');
  }
});
