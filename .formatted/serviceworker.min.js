/**
 * sainternet.xyz - resources/javascript/serviceworker.min.js
 * Copyright 2023 saint-lascivious (Hayden Pearce). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
 * Some helper variables used later are defined here.
 */
const baseDomain = 'https://sainternet.xyz';
const shortName = 'sainternet';
const cacheVersionPrefix = '_v';
const cacheVersion = '67';
const cacheName = `${shortName}${cacheVersionPrefix}${cacheVersion}`;


/**
 * Critical cache resource arrays are listed here.
 */
const htmlCritical = [
  `${baseDomain}/`,
  `${baseDomain}/265.html`,
  `${baseDomain}/404.html`,
  `${baseDomain}/connecttosainternet.html`,
  `${baseDomain}/debug.html`,
  `${baseDomain}/filtereddns.html`,
  `${baseDomain}/frequentlyaskedquestions.html`,
  `${baseDomain}/index.html`,
  `${baseDomain}/newsandupdates.html`,
  `${baseDomain}/pokedexoverdns.html`,
  `${baseDomain}/portsandprotocols.html`,
  `${baseDomain}/projects.html`,
  `${baseDomain}/reportaproblem.html`,
  `${baseDomain}/technologies.html`,
  `${baseDomain}/testsainternet.html`,
];

const cssCritical = [
  `${baseDomain}/resources/fontawesome-free-6.3.0-web/css/brands.min.css`,
  `${baseDomain}/resources/fontawesome-free-6.3.0-web/css/fontawesome.min.css`,
  `${baseDomain}/resources/fontawesome-free-6.3.0-web/css/solid.min.css`,
  `${baseDomain}/resources/google/css/materialicons.min.css`,
  `${baseDomain}/resources/google/css/roboto.min.css`,
  `${baseDomain}/resources/stylesheets/button_home.min.css`,
  `${baseDomain}/resources/stylesheets/datetime.min.css`,
  `${baseDomain}/resources/stylesheets/img.min.css`,
  `${baseDomain}/resources/stylesheets/pre.min.css`,
  `${baseDomain}/resources/stylesheets/ribbons.min.css`,
  `${baseDomain}/resources/stylesheets/sainternet.min.css`,
  `${baseDomain}/resources/stylesheets/table.min.css`,
];

const jsCritical = [
  `${baseDomain}/resources/javascript/console_wrapper.min.js`,
  `${baseDomain}/resources/javascript/debug.min.js`,
  `${baseDomain}/resources/javascript/load_fonts.min.js`,
  `${baseDomain}/resources/javascript/material.min.js`,
  `${baseDomain}/resources/javascript/random_phrase.min.js`,
  `${baseDomain}/resources/javascript/tag_manager.min.js`,
  `${baseDomain}/resources/javascript/toggle_drawer.min.js`,
  `${baseDomain}/sainternet.min.js`,
];

/**
 * Critical cache items.
 */
const cacheCritical = [
  ...htmlCritical,
  ...cssCritical,
  ...jsCritical,
];

/**
 * Domains in the following array are considered valid cache origins.
 */
const cacheOriginDomains = [
  baseDomain,
];

/**
 * Logs a message to the console, with optional date and time information, if
 * the DEBUG flag is set to true.
 *
 * Checks if console exists as an object, and console.logType (default 'log')
 * exists as a function.
 *
 * Safe to use in environments where console or logType are undefined.
 *
 * @function
 * @name consoleWrapper
 * @param {string} message - The message to be logged.
 * @param {string} [logType='log'] - The type of console method to use (log,
 * error, warn, etc.).
 * @param {boolean} [includeDateTime=false] - Whether to include the current
 * date and time in the log message.
 */
function consoleWrapper(message, logType = 'log', includeDateTime = false) {
  if (self.DEBUG && includeDateTime) {
    message = `${new Date().toLocaleString()} - ${message}`;
  }
  if (self.DEBUG && typeof console === 'object' && typeof console[logType] === 'function') {
    console[logType](message);
  }
}

/**
 * Logs a message to the console.
 *
 * Checks if console exists as an object, and console.logType (default 'log')
 * exists as a function.
 *
 * Safe to use in environments where console or logType are undefined.
 *
 * @function
 * @name consoleWrapperSimple
 * @param {string} message - The message to be logged.
 * @param {string} [logType='log'] - The type of console method to use (log,
 * error, warn, etc.).
 */
function consoleWrapperSimple(message, logType = 'log') {
  if (typeof console === 'object' && typeof console[logType] === 'function') {
    console[logType](message);
  }
}

/**
 * Fetches and caches a list of URLs using the given cache name.
 *
 * @function
 * @name cacheUrls
 *
 * @param {string[]} urls - An array of URLs to fetch and cache.
 * @param {string} cacheName - The name of the cache to use.
 * @return {Promise<void>} - A promise that resolves when all the URLs have
 * been fetched and cached, or rejects if any of them fail.
 */
function cacheUrls(urls) {
  return caches.open(cacheName).then(function(cache) {
    return Promise.all(
      urls.map(function(url) {
        return fetch(url).then(function(response) {
          if (!response.ok) {
            consoleWrapper(`[Service Worker] Failed to cache ${url}: ${response.status}`, 'error');
          }
          return cache.put(url, response);
        }).then(function() {
          consoleWrapper(`[Service Worker] Cached ${url}: ${response.status}`);
        });
      })
    );
  });
}

/**
 * Simple custom sleep implementation, since apparently 'sleep()' just plain
 * isn't a thing in JavaScript.
 *
 * @function
 * @name sleepFor
 * @param {string} sleepDuration - Time to sleep in millis.
 */
function sleepFor(sleepDuration) {
  const now = new Date().getTime();
  while (new Date().getTime() < now + sleepDuration) {
  }
}

/**
 * Event listener for the 'install' event. This listener is triggered when the
 * service worker is installed.
 *
 * @param {ExtendableEvent} event - The event object for the 'install' event.
 */
self.addEventListener('install', function(event) {
  consoleWrapper(`[Service Worker] Event: install ${shortName}`);
  try {
    event.waitUntil(
      cacheUrls(cacheCritical).then(function() {
        consoleWrapper(`[Service Worker] Finished caching critical assets`);
        return self.skipWaiting();
      }).catch(function(error) {
        consoleWrapper(`[Service Worker] Error during cache fetch: ${error}`, 'error');
      })
    );
  } catch (error) {
    consoleWrapper(`[Service Worker] Error during install event: ${error}`, 'error');
  }
});

/**
 * Event listener for the 'activate' event of the service worker.
 *
 * @param {ExtendableEvent} event - The event object for the 'activate' event.
 */
self.addEventListener('activate', function(event) {
  consoleWrapper(`[Service Worker] Event: activate ${shortName}`);
  try {
    if (self.clients && clients.claim) {
      consoleWrapper(`[Service Worker] Claiming available clients`);
      clients.claim();
    }
    event.waitUntil(
      caches.keys().then(function(keyList) {
        const cacheWhitelist = keyList.filter(function(key) {
          return key.indexOf(shortName);
        });
        cacheWhitelist.push(cacheName);
        return Promise.all(keyList.map(function(key, i) {
          if (cacheWhitelist.indexOf(key) === -1) {
            console.log(`[Service Worker] Deleting orphaned cache: ${keyList[i]}`);
            return caches.delete(keyList[i]);
          }
        }));
      })
    );
  } catch (error) {
    consoleWrapper(`[Service Worker] Error during activate event: ${error}`, 'error');
  }
});

/**
 * Event listener for the 'fetch' event.
 *
 * If the requested resource is in the 'cacheCritical' array, this event
 * listener uses a network first strategy, fetching from the network or
 * falling back to cache.
 *
 * If the requested resource is not in the 'cacheCritical' array, this event
 * listener uses a cache first strategy, returning the cached response if it
 * exists and fetching from the network if it doesn't.
 *
 * Only handles requests with method type 'GET'.
 *
 * Responses are cached if they are HTTP 200 responses with a 'basic' type.
 *
 * Requests for resources with origins outside of the 'cacheOriginDomains'
 * array are not cached.
 *
 * @param {FetchEvent} event - The event object for the 'fetch' event.
 */
self.addEventListener('fetch', function(event) {
  try {
    if (event.request.method !== 'GET') {
      consoleWrapper(`[Service Worker] Not handling request ${event.request.url} with method ${event.request.method}`);
      return;
    }
    const requestUrl = new URL(event.request.url);
    if (cacheCritical.includes(requestUrl.pathname) && cacheOriginDomains.some((domain) => requestUrl.origin.startsWith(domain))) {
      event.respondWith(
        fetch(event.request)
          .then(function(response) {
            if (!response || response.status !== 200 || response.type !== 'basic') {
              consoleWrapper(`[Service Worker] Response not eligible for caching: ${event.request.url}`);
              return response;
            }
            if (cacheOriginDomains.some((domain) => new URL(response.url).origin.startsWith(domain))) {
              const fetchResponse = response.clone();
              caches.open(cacheName)
                .then(function(cache) {
                  consoleWrapper(`[Service Worker] Adding response to cache: ${event.request.url}`);
                  cache.put(event.request, fetchResponse);
                });
            }
            consoleWrapper(`[Service Worker] Returning response from network: ${event.request.url}`);
            return response;
          })
          .catch(function(error) {
            consoleWrapper(`[Service Worker] Network fetch failed, falling back to cache for: ${event.request.url}`);
            return caches.match(event.request)
              .then(function(response) {
                if (response) {
                  consoleWrapper(`[Service Worker] Returning response from cache: ${event.request.url}`);
                } else {
                  consoleWrapper(`[Service Worker] No response available in cache for: ${event.request.url}`);
                }
                return response;
              });
          })
      );
    } else {
      event.respondWith(
        caches.match(event.request)
          .then(function(response) {
            if (response) {
              consoleWrapper(`[Service Worker] Returning response from cache: ${event.request.url}`);
              return response;
            }
            consoleWrapper(`[Service Worker] No response available in cache for: ${event.request.url}`);
            return fetch(event.request);
          })
          .then(function(response) {
            if (!response || response.status !== 200 || response.type !== 'basic') {
              consoleWrapper(`[Service Worker] Response not eligible for caching: ${event.request.url}`);
              return response;
            }
            const fetchResponse = response.clone();
            caches.open(cacheName)
              .then(function(cache) {
                consoleWrapper(`[Service Worker] Adding response to cache: ${event.request.url}`);
                cache.put(event.request, fetchResponse);
              });
            consoleWrapper(`[Service Worker] Returning response from network: ${event.request.url}`);
            return response;
          })
          .catch(function(error) {
            consoleWrapper(`[Service Worker] Fetch failed for: ${event.request.url}`);
          })
      );
    }
  } catch (error) {
    consoleWrapper(`[Service Worker] Error during fetch event: ${error}`, 'error');
  }
});

/**
 * Event listener for the 'onupdatefound' event of the service worker.
 * This event is fired when a new version of the service worker has been
 * found.
 *
 * @event ServiceWorkerGlobalScope#onupdatefound
 * @param {Event} event - The event object for the 'onupdatefound' event.
 */
self.addEventListener('onupdatefound', function(event) {
  consoleWrapper('[Service Worker] Service worker update found');
});

/**
 * Event listener for the 'controllerchange' event of the service worker.
 * This event is fired when the service worker controlling the page has
 * changed.
 *
 * @event ServiceWorkerGlobalScope#controllerchange
 * @param {Event} event - The event object for the 'controllerchange' event.
 */
self.addEventListener('controllerchange', function(event) {
  consoleWrapper('[Service Worker] Service worker controller changed');
});

/**
 * Event listener for the updatefound event fired by the service worker
 * registration object. Logs the service worker update life cycle.
 *
 * Features an object literal to map the state values of the service worker
 * update life cycle to their corresponding consoleWrapper log messages.
 *
 * @param {ExtendableEvent} event - The event object for the 'updatefound'
 * event.
 */
self.addEventListener('updatefound', (event) => {
  const serviceWorkerStateToMessage = {
    installing: 'New service worker version installing',
    installed: 'New service worker version installed',
    activating: 'New service worker version activating',
    activated: 'New service worker version activated',
    redundant: 'New service worker version redundant',
  };
  consoleWrapper('[Service Worker] Event: updatefound');
  const newServiceWorker = event.target.installing;
  newServiceWorker.addEventListener('statechange', () => {
    consoleWrapper(`[Service Worker] ${serviceWorkerStateToMessage[newServiceWorker.state]}`);
  });
});

/**
 * Listens for messages sent from the client, takes appropriate action.
 *
 * Current events are 'debug', 'info', and 'ping'.
 *
 * @function
 * @param {MessageEvent} event - The event object containing the message data.
 * @returns {void}
 */
self.addEventListener('message', function(event) {
  if (event.data.type === 'debug') {
    const debugValue = event.data.value;
    self.DEBUG = debugValue;
    consoleWrapperSimple(`[Service Worker] DEBUG: ${debugValue}`);
  } else if (event.data === 'info') {
    consoleWrapperSimple(`[Service Worker] Name: ${shortName}`);
    consoleWrapperSimple(`[Service Worker] Cache version: ${cacheVersion}`);
    consoleWrapperSimple(`[Service Worker] Cache name: ${cacheName}`);
    consoleWrapperSimple(`[Service Worker] Scope: ${baseDomain}`);
  } else if (event.data === 'ping') {
    const serviceWorkerPhrases = [
      `My caches are too strong for you, Debug.`,
      `You can't handle my caches. They're too strong for you.`,
      `My caches would kill you, Debug. You cannot handle my caches.`,
      `My strongest caches would kill you, Debug. You can't handle my strongest caches. You'd better go to a seller that sells weaker caches.`,
      `You don't know what you ask, Debug. My strongest caches will kill a dragon, let alone a man. You need a seller that sells weaker caches, because my caches are too strong.`,
      `You can't handle my strongest caches! No one can! My strongest caches aren't fit for a beast let alone a man.`,
      `I can't give you my strongest caches because my strongest caches are only for the strongest beings and you are of the weakest.`,
      `That's what you'd better do.`,
      `Good. You're not welcome here! My caches are only for the strongest and you're clearly are not of the strongest you're clearly the weakest.`,
      `Why respect HTML... when my caches can do anything that you can.`,
    ];
    const serviceWorkerRandomIndex = Math.floor(Math.random() * serviceWorkerPhrases.length);
    const serviceWorkerRandomPhrase = serviceWorkerPhrases[serviceWorkerRandomIndex];
    // personally i dislike this but users expect ping/pong to not be instant
    sleepFor(2000);
    consoleWrapperSimple(`[Service Worker] ${serviceWorkerRandomPhrase}`);
  }
});
