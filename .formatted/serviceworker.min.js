/**
 * sainternet.xyz - resources/javascript/serviceworker.min.js
 * Copyright 2023 saint-lascivious (Hayden Pearce). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
 * Some helper variables used later are defined here.
 */
const baseDomain = 'https://sainternet.xyz';
const shortName = 'sainternet';
const versionPrefix = '_v';
const versionSuffix = '1.2.3';
const cacheName = `${shortName}${versionPrefix}${versionSuffix}`;

/**
 * Cache resource arrays are listed here.
 */
const cssUrls = [
  `${baseDomain}/resources/fontawesome-free-6.4.0-web/css/brands.min.css`,
  `${baseDomain}/resources/fontawesome-free-6.4.0-web/css/fontawesome.min.css`,
  `${baseDomain}/resources/fontawesome-free-6.4.0-web/css/solid.min.css`,
  `${baseDomain}/resources/google/css/materialicons.min.css`,
  `${baseDomain}/resources/google/css/roboto.min.css`,
  `${baseDomain}/resources/google/css/robotomono.min.css`,
  `${baseDomain}/resources/stylesheets/button_home.min.css`,
  `${baseDomain}/resources/stylesheets/datetime.min.css`,
  `${baseDomain}/resources/stylesheets/img.min.css`,
  `${baseDomain}/resources/stylesheets/material.amber-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.blue_grey-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.blue-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.brown-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.cyan-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.deep_orange-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.deep_purple-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.green-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.grey-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.indigo-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.light_blue-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.light_green-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.lime-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.orange-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.pink-red.min.css`,
  // unassigned, incorrect theme colour behaviour observed in dark mode
  // `${baseDomain}/resources/stylesheets/material.purple-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.red-blue.min.css`,
  `${baseDomain}/resources/stylesheets/material.teal-red.min.css`,
  `${baseDomain}/resources/stylesheets/material.yellow-red.min.css`,
  `${baseDomain}/resources/stylesheets/mono.min.css`,
  `${baseDomain}/resources/stylesheets/party-time.min.css`,
  `${baseDomain}/resources/stylesheets/ribbons.min.css`,
  `${baseDomain}/resources/stylesheets/sainternet.min.css`,
  `${baseDomain}/resources/stylesheets/shadow-boxing.min.css`,
  `${baseDomain}/resources/stylesheets/table.min.css`,
];

const fontUrls = [
  `${baseDomain}/resources/fontawesome-free-6.4.0-web/webfonts/fa-brands-400.woff2`,
  `${baseDomain}/resources/fontawesome-free-6.4.0-web/webfonts/fa-solid-900.woff2`,
  `${baseDomain}/resources/google/webfonts/materialicons/v140/Material-Icons.woff2`,
  `${baseDomain}/resources/google/webfonts/robotomono/v22/RobotoMono-BoldItalic.woff2`,
  `${baseDomain}/resources/google/webfonts/robotomono/v22/RobotoMono-Bold.woff2`,
  `${baseDomain}/resources/google/webfonts/robotomono/v22/RobotoMono-Italic.woff2`,
  `${baseDomain}/resources/google/webfonts/robotomono/v22/RobotoMono-Regular.woff2`,
  `${baseDomain}/resources/google/webfonts/roboto/v30/Roboto-Black.woff2`,
  `${baseDomain}/resources/google/webfonts/roboto/v30/Roboto-Bold.woff2`,
  `${baseDomain}/resources/google/webfonts/roboto/v30/Roboto-Italic.woff2`,
  `${baseDomain}/resources/google/webfonts/roboto/v30/Roboto-Medium.woff2`,
  `${baseDomain}/resources/google/webfonts/roboto/v30/Roboto-Regular.woff2`,
];

const htmlUrls = [
  `${baseDomain}/265.html`,
  `${baseDomain}/404.html`,
  `${baseDomain}/archive.html`,
  `${baseDomain}/connecttosainternet.html`,
  `${baseDomain}/debug.html`,
  `${baseDomain}/devdiary.html`,
  `${baseDomain}/filtereddns.html`,
  `${baseDomain}/frequentlyaskedquestions.html`,
  `${baseDomain}/index.html`,
  `${baseDomain}/newsandupdates.html`,
  `${baseDomain}/pokedexoverdns.html`,
  `${baseDomain}/portsandprotocols.html`,
  `${baseDomain}/projects.html`,
  `${baseDomain}/reportaproblem.html`,
  `${baseDomain}/technologies.html`,
  `${baseDomain}/testsainternet.html`,
];

const heroImageUrls = [
  `${baseDomain}/resources/images/pihole_percent-day.webp`,
  `${baseDomain}/resources/images/pihole_percent-week.webp`,
  `${baseDomain}/resources/images/pihole_percent-month.webp`,
  `${baseDomain}/resources/images/pihole_percent-year.webp`,
  `${baseDomain}/resources/images/farquaad.webp`,
  `${baseDomain}/resources/images/luxio.webp`,
  `${baseDomain}/resources/images/luxio-shiny.webp`,
  `${baseDomain}/resources/images/terminal.webp`,
  `${baseDomain}/resources/images/wurmple.webp`,
  `${baseDomain}/resources/images/wurmple-shiny.webp`,
];

const iconUrls = [
  `${baseDomain}/favicon.ico`,
  `${baseDomain}/resources/icons/favicon/favicon.ico`,
  `${baseDomain}/resources/icons/favicon/favicon-16x16.png`,
  `${baseDomain}/resources/icons/favicon/favicon-24x24.png`,
  `${baseDomain}/resources/icons/favicon/favicon-32x32.png`,
  `${baseDomain}/resources/icons/android-chrome-48x48.png`,
  `${baseDomain}/resources/icons/favicon/favicon-64x64.png`,
  `${baseDomain}/resources/icons/android-chrome-72x72.png`,
  `${baseDomain}/resources/icons/android-chrome-96x96.png`,
  `${baseDomain}/resources/icons/android-chrome-128x128.png`,
  `${baseDomain}/resources/icons/android-chrome-192x192.png`,
  `${baseDomain}/resources/icons/android-chrome-384x384.png`,
  `${baseDomain}/resources/icons/android-chrome-512x512.png`,
  `${baseDomain}/resources/icons/apple-touch-icon-180x180.png`,
  `${baseDomain}/resources/icons/browserconfig.xml`,
  `${baseDomain}/resources/icons/mstile-144x144.png`,
  `${baseDomain}/resources/icons/mstile-150x150.png`,
  `${baseDomain}/resources/icons/safari-pinned-tab.svg`,
];

const jsUrls = [
  `${baseDomain}/resources/javascript/console_wrapper.min.js`,
  `${baseDomain}/resources/javascript/debug.min.js`,
  `${baseDomain}/resources/javascript/load_fonts.min.js`,
  `${baseDomain}/resources/javascript/load_mono_fonts.min.js`,
  `${baseDomain}/resources/javascript/material.min.js`,
  `${baseDomain}/resources/javascript/random_url.min.js`,
  `${baseDomain}/resources/javascript/tag_manager.min.js`,
  `${baseDomain}/resources/javascript/toggle_drawer.min.js`,
  `${baseDomain}/sainternet.min.js`,
  `${baseDomain}/serviceworker.min.js`,
];

/**
 * Critical cache item array, items in this array will be fetched with a
 * network first policy.
 */
const cacheCritical = [
  ...htmlUrls,
  ...cssUrls,
  ...jsUrls,
];

/**
 * Installation cache item array, everything required to function offline.
 */
const cacheOnInstall = [
  ...htmlUrls,
  ...iconUrls,
  ...heroImageUrls,
  ...cssUrls,
  ...jsUrls,
  ...fontUrls,
];

/**
 * Domains in the following array are considered valid cache origins.
 */
const cacheOriginDomains = [
  baseDomain,
];

/**
 * Logs a message to the console, with optional date and time information, if
 * the CONSOLE_LOGGING flag is set to true.
 *
 * Checks if console exists as an object, and console.logType (default 'log')
 * exists as a function.
 *
 * Safe to use in environments where console or logType are undefined.
 *
 * @function
 * @name consoleWrapper
 * @param {string} message - The message to be logged.
 * @param {string} [logType='log'] - The type of console method to use (log,
 * error, warn, etc.).
 * @param {boolean} [includeDateTime=false] - Whether to include the current
 * date and time in the log message.
 */
function consoleWrapper(message, logType = 'log', includeDateTime = false) {
  if (includeDateTime) {
    message = `${new Date().toLocaleString()} - ${message}`;
  }
  if (self.CONSOLE_LOGGING && typeof console === 'object' && typeof console[logType] === 'function') {
    console[logType](message);
  }
}

/**
 * Logs a message to the console.
 *
 * Checks if console exists as an object, and console.logType (default 'log')
 * exists as a function.
 *
 * Safe to use in environments where console or logType are undefined.
 *
 * @function
 * @name consoleWrapperSimple
 * @param {string} message - The message to be logged.
 * @param {string} [logType='log'] - The type of console method to use (log,
 * error, warn, etc.).
 */
function consoleWrapperSimple(message, logType = 'log') {
  if (typeof console === 'object' && typeof console[logType] === 'function') {
    console[logType](message);
  }
}

/**
 * Fetches and caches an array of URLs using the given cache name.
 *
 * @function
 * @name fetchCacheUrlArray
 *
 * @param {string} cacheName - The name of the cache to use.
 * @param {string} cacheUrlArray - An array of URLs to fetch and cache.
 * @return {Promise<void>} - A promise that resolves when all the URLs have
 * been fetched and cached, or rejects if any of them fail.
 */
function fetchCacheUrlArray(cacheName, cacheUrlArray) {
  consoleWrapper(`[Service Worker] Opening ${cacheName}`);
  return caches.open(cacheName).then((cache) => {
    return Promise.all(
      cacheUrlArray.map((url) => fetch(url).then((response) => {
        if (response.ok) {
          cache.put(url, response.clone());
          consoleWrapper(`[Service Worker] Cached ${url}: ${response.status}`);
          return response;
        }
        consoleWrapper(`[Service Worker] Failed to cache ${url}: ${response.status}`, 'error');
      }).catch((error) => {
        consoleWrapper(`[Service Worker] Fetch failed for cache: ${cacheName}`, 'error');
      }))
    );
  });
}

/**
 * Simple custom sleep implementation, since apparently 'sleep()' just plain
 * isn't a thing in JavaScript.
 *
 * Wait for a duration. If a duration is not specified, wait for a random
 * duration between 100 and 2500 (in multiples of 50), in the simplest fashion
 * I could come up with to do so.
 *
 * Personally I kind of dislike this, but actions faking a 'working' state is
 * not exactly a new concept.
 *
 * @function
 * @name sleepFor
 * @param {number} [sleepDuration] - Time to sleep in millis, random if null.
 */
function sleepFor(sleepDuration) {
  if (!sleepDuration) {
    sleepDuration = Math.floor(Math.random() * 49) * 50 + 100;
  }
  const now = Date.now();
  while (Date.now() < now + sleepDuration) {
  }
}

/**
 * Event listener for service worker 'activate' events.
 *
 * @param {ExtendableEvent} event - The event object for the 'activate' event.
 */
self.addEventListener('activate', function(event) {
  consoleWrapper(`[Service Worker] Event: activate ${shortName}`);
  try {
    if (self.clients && clients.claim) {
      consoleWrapper(`[Service Worker] Claiming available clients`);
      clients.claim();
    }
    event.waitUntil(
      caches.keys().then(function(keyList) {
        const cacheWhitelist = keyList.filter(function(key) {
          return key.indexOf(shortName);
        });
        cacheWhitelist.push(cacheName);
        return Promise.all(keyList.map(function(key, i) {
          if (cacheWhitelist.indexOf(key) === -1) {
            console.log(`[Service Worker] Deleting orphaned cache: ${keyList[i]}`);
            return caches.delete(keyList[i]);
          }
        }));
      })
    );
  } catch (error) {
    consoleWrapper(`[Service Worker] Error during activate event: ${error}`, 'error');
  }
});

/**
 * Event listener for service worker 'install' events.
 *
 * @param {ExtendableEvent} event - The event object for the 'install' event.
 */
self.addEventListener('install', function(event) {
  consoleWrapper(`[Service Worker] Event: install ${shortName}`);
  try {
    event.waitUntil(
      fetchCacheUrlArray(cacheName, cacheOnInstall).then(function() {
        consoleWrapper(`[Service Worker] Finished caching critical assets`);
        return self.skipWaiting();
      }).catch(function(error) {
        consoleWrapper(`[Service Worker] Error during cache fetch: ${error}`, 'error');
      })
    );
  } catch (error) {
    consoleWrapper(`[Service Worker] Error during install event: ${error}`, 'error');
  }
});

/**
 * Event listener for the service worker 'fetch' events.
 *
 * If the requested resource is in the 'cacheCritical' array, this event
 * listener uses a network first strategy, fetching from the network or
 * falling back to cache.
 *
 * If the requested resource is not in the 'cacheCritical' array, this event
 * listener uses a cache first strategy, returning the cached response if it
 * exists and fetching from the network if it doesn't.
 *
 * Only handles requests with method type 'GET'.
 *
 * Responses are cached if they are HTTP 200 responses with a 'basic' type.
 *
 * Requests for resources with origins outside of the 'cacheOriginDomains'
 * array are not cached.
 *
 * @param {FetchEvent} event - The event object for the 'fetch' event.
 */
self.addEventListener('fetch', function(event) {
  try {
    if (event.request.method !== 'GET') {
      consoleWrapper(`[Service Worker] Not handling request ${event.request.url} with method ${event.request.method}`);
      return;
    }
    const requestUrl = new URL(event.request.url);
    if (cacheCritical.includes(requestUrl.pathname) && cacheOriginDomains.some((domain) => requestUrl.origin.startsWith(domain))) {
      event.respondWith(
        fetch(event.request)
          .then(function(response) {
            if (!response || response.status !== 200 || response.type !== 'basic') {
              consoleWrapper(`[Service Worker] Response not eligible for caching: ${event.request.url}`);
              return response;
            }
            if (cacheOriginDomains.some((domain) => new URL(response.url).origin.startsWith(domain))) {
              const fetchResponse = response.clone();
              caches.open(cacheName)
                .then(function(cache) {
                  consoleWrapper(`[Service Worker] Adding response to cache: ${event.request.url}`);
                  cache.put(event.request, fetchResponse);
                });
            }
            consoleWrapper(`[Service Worker] Returning response from network: ${event.request.url}`);
            return response;
          })
          .catch(function(error) {
            consoleWrapper(`[Service Worker] Network fetch failed, falling back to cache for: ${event.request.url}`);
            return caches.match(event.request)
              .then(function(response) {
                if (response) {
                  consoleWrapper(`[Service Worker] Returning response from cache: ${event.request.url}`);
                } else {
                  consoleWrapper(`[Service Worker] No response available in cache for: ${event.request.url}`);
                }
                return response;
              });
          })
      );
    } else {
      event.respondWith(
        caches.match(event.request)
          .then(function(response) {
            if (response) {
              consoleWrapper(`[Service Worker] Returning response from cache: ${event.request.url}`);
              return response;
            }
            consoleWrapper(`[Service Worker] No response available in cache for: ${event.request.url}`);
            return fetch(event.request);
          })
          .then(function(response) {
            if (!response || response.status !== 200 || response.type !== 'basic') {
              consoleWrapper(`[Service Worker] Response not eligible for caching: ${event.request.url}`);
              return response;
            }
            const fetchResponse = response.clone();
            caches.open(cacheName)
              .then(function(cache) {
                consoleWrapper(`[Service Worker] Adding response to cache: ${event.request.url}`);
                cache.put(event.request, fetchResponse);
              });
            consoleWrapper(`[Service Worker] Returning response from network: ${event.request.url}`);
            return response;
          })
          .catch(function(error) {
            consoleWrapper(`[Service Worker] Fetch failed for: ${event.request.url}`);
          })
      );
    }
  } catch (error) {
    consoleWrapper(`[Service Worker] Error during fetch event: ${error}`, 'error');
  }
});

/**
 * Event listener for the service worker 'message' events.
 *
 * Listens for messages sent from the client, takes appropriate action.
 *
 * Current events are 'console_logging', 'info', and 'ping'.
 *
 * @function
 * @param {MessageEvent} event - The event object containing the message data.
 * @returns {void}
 */
self.addEventListener('message', function(event) {
  if (event.data.type === 'console_logging') {
    const consoleValue = event.data.value;
    self.CONSOLE_LOGGING = consoleValue;
    consoleWrapper(`[Service Worker] CONSOLE_LOGGING: ${consoleValue}`);
  } else if (event.data === 'info') {
    consoleWrapperSimple(`[Service Worker] Name: ${shortName}`);
    consoleWrapperSimple(`[Service Worker] Version: ${versionSuffix}`);
    consoleWrapperSimple(`[Service Worker] Cache Name: ${cacheName}`);
    consoleWrapperSimple(`[Service Worker] Base Domain: ${baseDomain}`);
  } else if (event.data === 'ping') {
    const serviceWorkerPhrases = [
      `My caches are too strong for you, Debug.`,
      `You can't handle my caches. They're too strong for you.`,
      `My caches would kill you, Debug. You cannot handle my caches.`,
      `My strongest caches would kill you, Debug. You can't handle my strongest caches. You'd better go to a seller that sells weaker caches.`,
      `You don't know what you ask, Debug. My strongest caches will kill a dragon, let alone a man. You need a seller that sells weaker caches, because my caches are too strong.`,
      `You can't handle my strongest caches! No one can! My strongest caches aren't fit for a beast let alone a man.`,
      `I can't give you my strongest caches because my strongest caches are only for the strongest beings and you are of the weakest.`,
      `That's what you'd better do.`,
      `Good. You're not welcome here! My caches are only for the strongest and you're clearly are not of the strongest you're clearly the weakest.`,
      `Why respect HTML... when my caches can do anything that you can.`,
    ];
    const serviceWorkerRandomIndex = Math.floor(Math.random() * serviceWorkerPhrases.length);
    const serviceWorkerRandomPhrase = serviceWorkerPhrases[serviceWorkerRandomIndex];
    sleepFor();
    consoleWrapperSimple(`[Service Worker] ${serviceWorkerRandomPhrase}`);
  }
});

/**
 * Announce ourselves.
 */
consoleWrapper(`[Service Worker] Loaded`);
