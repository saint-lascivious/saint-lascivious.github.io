/**
 * sainternet.xyz - resources/javascript/debug.min.js
 * Copyright 2023 saint-lascivious (Hayden Pearce). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
 * Clears all key/value pairs in both localStorage and sessionStorage.
 *
 * @function
 * @name deleteLocalStorageAndSessionStorage
 * @return {void}
 */
function deleteLocalStorageAndSessionStorage() {
  let numLocalStorageDeleted = 0;
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    const value = localStorage.getItem(key);
    localStorage.removeItem(key);
    consoleWrapperSimple(`[Debug] Deleted localStorage key: ${key}, value: ${value}`);
    numLocalStorageDeleted++;
  }
  let numSessionStorageDeleted = 0;
  for (let i = 0; i < sessionStorage.length; i++) {
    const key = sessionStorage.key(i);
    const value = sessionStorage.getItem(key);
    sessionStorage.removeItem(key);
    consoleWrapperSimple(`[Debug] Deleted sessionStorage key: ${key}, value: ${value}`);
    numSessionStorageDeleted++;
  }
  if (numLocalStorageDeleted === 0 && numSessionStorageDeleted === 0) {
    consoleWrapperSimple(`[Debug] No key/value pairs found to delete in localStorage or sessionStorage`);
  }
}

/**
 * Toggles the DEBUG flag in local storage.
 *
 * @function
 * @name toggleDebugFlag
 * @return {void}
 */
function toggleDebugFlag() {
  const debugFlag = sessionStorage.getItem('DEBUG');
  let debugValue = false;
  if (debugFlag === 'true') {
    consoleWrapper('[Debug] DEBUG: false');
    debugValue = false;
    sessionStorage.setItem('DEBUG', 'false');
  } else {
    debugValue = true;
    sessionStorage.setItem('DEBUG', 'true');
    consoleWrapper('[Debug] DEBUG: true');
  }
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.active.postMessage({type: 'debug', value: debugValue});
      });
  }
  return debugValue;
}

/**
 * Sends an "info" message to the service worker.
 *
 * @name getServiceWorkerInfo
 * @function
 * @return {void}
 */
function getServiceWorkerInfo() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        consoleWrapperSimple('[Debug] Sending service worker info message');
        registration.active.postMessage('info');
      }
    );
  }
}

/**
 * Sends a "ping" message to the service worker and logs it.
 *
 * @name pingServiceWorker
 * @function
 * @return {void}
 */
function pingServiceWorker() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        consoleWrapperSimple(`[Debug] Service Worker, I'm going offline and I need your strongest caches.`);
        registration.active.postMessage('ping');
      }
    );
  }
}
