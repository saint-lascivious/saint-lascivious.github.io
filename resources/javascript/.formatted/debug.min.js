/**
 * sainternet.xyz - resources/javascript/debug.min.js
 * Copyright 2022 saint-lascivious (Hayden Pearce). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
 * Used in deleteServiceWorkerCaches
 *
 * Mirrored from serviceworker.min.js
 */
const pwaName = 'sainternet';
const pwaVersion = '_v12';

/**
 * Clears all key/value pairs in both localStorage and sessionStorage.
 *
 * @function
 * @name deleteLocalStorageAndSessionStorage
 * @return {void}
 */
function deleteLocalStorageAndSessionStorage() {
  // "use strict";
  let numLocalStorageDeleted = 0;
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    const value = localStorage.getItem(key);
    localStorage.removeItem(key);
    console.log(`[Debug] Deleted localStorage key: ${key}, value: ${value}`);
    numLocalStorageDeleted++;
  }
  let numSessionStorageDeleted = 0;
  for (let i = 0; i < sessionStorage.length; i++) {
    const key = sessionStorage.key(i);
    const value = sessionStorage.getItem(key);
    sessionStorage.removeItem(key);
    console.log(`[Debug] Deleted sessionStorage key: ${key}, value: ${value}`);
    numSessionStorageDeleted++;
  }
  if (numLocalStorageDeleted === 0 && numSessionStorageDeleted === 0) {
    console.log(`[Debug] No key/value pairs found to delete in localStorage or sessionStorage`);
  }
}

/**
 * Deletes all service worker caches except for the current cache and reports
 * the number of matching caches found.
 *
 * @function
 * @name deleteServiceWorkerCaches
 * @return {void}
 */
function deleteServiceWorkerCaches() {
  // "use strict";
  const currentCacheName = `${pwaName}${pwaVersion}`;
  caches.keys().then((keys) => {
    const cacheKeys = keys.filter((key) => {
      return key.startsWith(pwaName) && key !== currentCacheName;
    });
    if (cacheKeys.length > 0) {
      logDebugMessage(`[Debug] Found ${cacheKeys.length} matching caches`);
    } else {
      logDebugMessage(`[Debug] No matching caches found`);
    }
    return Promise.all(cacheKeys.map((key) => {
      return caches.delete(key).then(() => {
        logDebugMessage(`[Debug] Deleted cache: ${key}`);
      });
    }));
  }).then(() => {
    return caches.open(currentCacheName);
  }).then((cache) => {
    return cache.clear();
  }).then(() => {
    logDebugMessage(`[Debug] Cleared contents of current cache: ${currentCacheName}`);
  }).catch((error) => {
    logDebugMessage(`[Debug] Error deleting/clearing caches: ${error}`, 'error');
  });
}

/**
 * Toggles the DEBUG flag in local storage and broadcasts the new value
 * through a channel using the Broadcast Channel API.
 *
 * @function
 * @name toggleDebugFlag
 * @return {void}
 */
function toggleDebugFlag() {
  // "use strict";
  const debugFlag = localStorage.getItem('DEBUG');
  let debugValue = false;
  if (debugFlag === 'true') {
    logDebugMessage('[Debug] Toggle DEBUG: false');
    debugValue = false;
    localStorage.setItem('DEBUG', 'false');
  } else {
    debugValue = true;
    localStorage.setItem('DEBUG', 'true');
    logDebugMessage('[Debug] Toggle DEBUG: true');
  }
  const broadcastChannel = new BroadcastChannel('sainternet-debug');
  broadcastChannel.postMessage({debugValue});
  broadcastChannel.close();
}

/**
 * Logs a debug message if the debug flag is set to true.
 *
 * @function
 * @name logDebugMessage
 * @param {string} message - The debug message to log.
 * @param {string} [logType='log'] - The type of console method to use for
 * logging the message (e.g. 'log', 'info', 'warn', 'error').
 * @return {void}
 */
function logDebugMessage(message, logType = 'log') {
  // "use strict";
  const debugFlag = localStorage.getItem('DEBUG');
  if (debugFlag === 'true') {
    console[logType](message);
  }
}
