/**
 * sainternet.xyz - resources/javascript/debug.min.js
 * Copyright 2022 saint-lascivious (Hayden Pearce). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
 * look at me, i'm a jsdoc, ohhweeee
 */
function toggleDebugFlag() {
  // "use strict";
  logDebugMessage('[Debug] Toggle DEBUG flag');
  const debugFlagDBName = 'sainternet-db';
  const debugFlagStoreName = 'debug-flag-store';

  const debugFlagDBPromise = indexedDB.open(debugFlagDBName);
  debugFlagDBPromise.onerror = (event) => logDebugMessage('[Debug] Error opening database', 'error');
  debugFlagDBPromise.onupgradeneeded = (event) => {
    const db = event.target.result;
    const store = db.createObjectStore(debugFlagStoreName, {keyPath: 'id'});
    store.put({id: 1, value: false});
  };

  debugFlagDBPromise.onsuccess = (event) => {
    const db = event.target.result;
    const transaction = db.transaction(debugFlagStoreName, 'readwrite');
    const store = transaction.objectStore(debugFlagStoreName);
    const request = store.get(1);

    request.onerror = (event) => logDebugMessage('[Debug] Error retrieving DEBUG flag', 'error');
    request.onsuccess = (event) => {
      const debugFlag = request.result.value;
      const newDebugFlag = !debugFlag;
      store.put({id: 1, value: newDebugFlag});
      const message = {type: 'setDebugFlag', value: newDebugFlag};
      navigator.serviceWorker.controller.postMessage(message);
      logDebugMessage('[Debug] Toggle DEBUG flag');
    };
  };
}

/**
 * look at me, i'm a jsdoc, ohhweeee
 */
function logDebugMessage(message, logType = 'log') {
  // "use strict";
  const debugFlagRequest = indexedDB.open('debugFlagDB');
  let debugFlagValue = false;
  debugFlagRequest.onerror = function(event) {
    logDebugMessage('[Debug] Error opening database', 'error');
  };
  debugFlagRequest.onsuccess = function(event) {
    const db = event.target.result;
    const transaction = db.transaction(['debugFlag'], 'readonly');
    const objectStore = transaction.objectStore('debugFlag');
    const getRequest = objectStore.get('debugFlag');
    getRequest.onerror = function(event) {
      logDebugMessage('[Debug] Error getting DEBUG flag value', 'error');
    };
    getRequest.onsuccess = function(event) {
      if (getRequest.result) {
        debugFlagValue = getRequest.result.value;
      }
      if (debugFlagValue) {
        console[logType](message);
      }
    };
  };
  debugFlagRequest.onupgradeneeded = function(event) {
    const db = event.target.result;
    const objectStore = db.createObjectStore('debugFlag', {keyPath: 'name'});
    objectStore.add({name: 'debugFlag', value: false});
  };
}
