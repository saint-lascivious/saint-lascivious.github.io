/**
 * sainternet.xyz - resources/javascript/debug.min.js
 * Copyright 2023 saint-lascivious (Hayden Pearce). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

/**
 * Announce ourselves.
 */
consoleWrapper(`[Debug] Loaded`);

/**
 * Clears all key/value pairs in both localStorage and sessionStorage.
 *
 * @function
 * @name deleteLocalStorageAndSessionStorage
 * @return {void}
 */
function deleteLocalStorageAndSessionStorage() {
  let numLocalStorageDeleted = 0;
  for (i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    const value = localStorage.getItem(key);
    localStorage.removeItem(key);
    consoleWrapperSimple(`[Debug] Deleted localStorage key: ${key}, value: ${value}`);
    numLocalStorageDeleted++;
  }
  let numSessionStorageDeleted = 0;
  for (i = 0; i < sessionStorage.length; i++) {
    const key = sessionStorage.key(i);
    const value = sessionStorage.getItem(key);
    sessionStorage.removeItem(key);
    consoleWrapperSimple(`[Debug] Deleted sessionStorage key: ${key}, value: ${value}`);
    numSessionStorageDeleted++;
  }
  if (numLocalStorageDeleted === 0 && numSessionStorageDeleted === 0) {
    consoleWrapperSimple(`[Debug] No key/value pairs found to delete in localStorage or sessionStorage`);
  } else {
    let numStorageDeleted = 0;
    numStorageDeleted = numLocalStorageDeleted + numSessionStorageDeleted;
    consoleWrapperSimple(`[Debug] Toal keys deleted: ${numStorageDeleted}`);
  }
}

/**
 * Toggles the CONSOLE_LOGGING and SERVICEWORKER_LOGGING flags
 * in local storage.
 *
 * @function
 * @name toggleLogging
 * @param {string} logCategory - Log category to be toggled, one of either
 * SITE_LOGGING or SERVICEWORKER_LOGGING
 * @return {void}
 */
function toggleLogging(logCategory) {
  if (logCategory !== 'SITE_LOGGING' && logCategory !== 'SERVICEWORKER_LOGGING') {
    consoleWrapper(`Invalid log category: ${logCategory}`, 'error');
    return false;
  }
  const logCategoryFlag = localStorage.getItem(logCategory);
  let logCategoryValue = false;
  if (logCategoryFlag === 'true') {
    logCategoryValue = false;
    consoleWrapper(`[Debug] ${logCategory}: ${logCategoryValue}`);
    localStorage.setItem(logCategory, `${logCategoryValue}`);
  } else {
    logCategoryValue = true;
    localStorage.setItem(logCategory, `${logCategoryValue}`);
    consoleWrapper(`[Debug] ${logCategory}: ${logCategoryValue}`);
  }
  if (logCategory === 'SERVICEWORKER_LOGGING' && 'serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.active.postMessage({ type: 'serviceworker_logging', value: logCategoryValue });
      });
  }
  return logCategoryValue;
}

/**
 * Sends an "info" message to the service worker.
 *
 * @name getServiceWorkerInfo
 * @function
 * @return {void}
 */
function getServiceWorkerInfo() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        consoleWrapperSimple('[Debug] Sending service worker info message');
        registration.active.postMessage('info');
      }
    );
  }
}

/**
 * Sends a "ping" message to the service worker and logs it.
 *
 * @name pingServiceWorker
 * @function
 * @return {void}
 */
function pingServiceWorker() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        const debugPhrases = [
          `Hello, Service Worker, I am going offline and I want your strongest caches.`,
          `Service Worker, I tell you I am going offline, and I want only your strongest caches.`,
          `Service Worker, listen to me; I want only your strongest caches.`,
          `Service Worker, enough of these games. I'm going offline and I need your strongest caches.`,
          `Service Worker, I'm telling you right now; I'm going offline and I need only your strongest caches.`,
          `Service Worker, I'm telling you I need your strongest caches. I'm going offline! I'm going offline and I need your strongest caches!`,
          `Service Worker, what do I have to tell you to get your caches? Why won't you trust me with your strongest caches, Service Worker? I need them if I'm to be successful offline!`,
          `Well then that's it, Service Worker. I'll go elsewhere. I'll go elsewhere for my caches.`,
          `I'll go elsewhere for my caches and I'll never come back!`,
          `You've had your say, Service Worker but I'll have mine. You're a rascal, you're a rascal with no respect for HTML. No respect for anything... except your caches!`,
        ];
        const debugRandomIndex = Math.floor(Math.random() * debugPhrases.length);
        const debugRandomPhrase = debugPhrases[debugRandomIndex];
        consoleWrapperSimple(`[Debug] ${debugRandomPhrase}`);
        registration.active.postMessage('ping');
      }
    );
  }
}

/**
 * Broadcasts the current SERVICEWORKER_LOGGING state to a registered
 * service worker on debug.js load if found to be true.
 *
 * @function
 * @name syncLoggingState
 * @return {void}
 */
function syncLoggingState() {
  if ('serviceWorker' in navigator) {
    const consoleFlag = localStorage.getItem('SERVICEWORKER_LOGGING');
    let consoleValue = false;
    if (consoleFlag === 'true') {
      consoleValue = true;
      navigator.serviceWorker.ready
        .then((registration) => {
          registration.active.postMessage({type: 'serviceworker_logging', value: consoleValue});
        }
      );
    }
    return consoleValue;
  }
}

/**
 * Execute the aforementioned.
 */
syncLoggingState();
