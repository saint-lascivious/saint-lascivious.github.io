const baseDomain="https://sainternet.xyz",cacheName="sainternet",cacheVersionPrefix="_v",cacheVersion="46",fullCacheName=`${cacheName}_v46`,cssURLS=[`${baseDomain}/resources/fontawesome-free-6.3.0-web/css/brands-stripped.min.css`,`${baseDomain}/resources/fontawesome-free-6.3.0-web/css/fontawesome-stripped.min.css`,`${baseDomain}/resources/fontawesome-free-6.3.0-web/css/solid.min.css`,`${baseDomain}/resources/stylesheets/ribbons.min.css`,`${baseDomain}/resources/stylesheets/sainternet.min.css`,],htmlURLS=[`${baseDomain}/`,`${baseDomain}/filtereddns.html`,`${baseDomain}/newsandupdates.html`,`${baseDomain}/pokedexoverdns.html`,`${baseDomain}/projects.html`,],jsURLS=[`${baseDomain}/resources/javascript/debug.min.js`,`${baseDomain}/resources/javascript/load_fonts.min.js`,`${baseDomain}/resources/javascript/material.min.js`,`${baseDomain}/resources/javascript/tag_manager.min.js`,`${baseDomain}/resources/javascript/toggle_drawer.min.js`,`${baseDomain}/sainternet.min.js`,],allURLS=[...cssURLS,...htmlURLS,...jsURLS,];function consoleWrapper(e,r="log",n=!1){self.DEBUG&&n&&(e=`${new Date().toLocaleString()} - ${e}`),self.DEBUG&&"object"==typeof console&&"function"==typeof console[r]&&console[r](e)}function consoleWrapperSimple(e,r="log"){"object"==typeof console&&"function"==typeof console[r]&&console[r](e)}self.addEventListener("install",function(e){consoleWrapper(`[Service Worker] Event: install ${cacheName}`);try{self.skipWaiting(),e.waitUntil(caches.open(fullCacheName).then(function(e){return consoleWrapper(`[Service Worker] Installing cache: ${fullCacheName}`),Promise.all(allURLS.map(function(r){return fetch(r).then(function(n){return n.ok||consoleWrapper(`[Service Worker] Failed to cache ${r}: ${n.status}`,"error"),e.put(r,n)}).then(function(){consoleWrapper(`[Service Worker] Cached ${r}`)})}))}))}catch(r){consoleWrapper(`[Service Worker] Error during install event: ${r}`,"error")}}),self.addEventListener("activate",function(e){consoleWrapper(`[Service Worker] Event: activate ${cacheName}`);try{self.clients&&clients.claim&&(consoleWrapper("[Service Worker] Claiming available clients"),clients.claim()),e.waitUntil(caches.keys().then(function(e){let r=e.filter(function(e){return e.indexOf(cacheName)});return consoleWrapper(`[Service Worker] Whitelisting current cache: ${fullCacheName}`),r.push(fullCacheName),Promise.all(e.map(function(n,a){if(-1===r.indexOf(n))return consoleWrapper(`[Service Worker] Deleting orphaned cache: ${e[a]}`),caches.delete(e[a])}))}))}catch(r){consoleWrapper(`[Service Worker] Error during activate event: ${r}`,"error")}}),self.addEventListener("fetch",function(e){try{if("GET"!==e.request.method)return;let r=new URL(e.request.url);if(!r.origin.startsWith(baseDomain))return fetch(e.request);e.respondWith(caches.match(e.request).then(function(r){return r?(consoleWrapper(`[Service Worker] Returning response from cache: ${e.request.url}`),r):(consoleWrapper(`[Service Worker] Fetching asset from network: ${e.request.url}`),fetch(e.request).then(function(r){if(!r||200!==r.status||"basic"!==r.type)return consoleWrapper(`[Service Worker] Response not eligible for caching: ${e.request.url}`),r;let n=r.clone();return caches.open(fullCacheName).then(function(r){consoleWrapper(`[Service Worker] Adding response to cache: ${e.request.url}`),r.put(e.request,n)}),consoleWrapper(`[Service Worker] Returning response from network: ${e.request.url}`),r}))}))}catch(n){consoleWrapper(`[Service Worker] Error during fetch event: ${n}`,"error")}}),self.addEventListener("message",e=>{if("debug"===e.data.type){let r=e.data.value;self.DEBUG=r,consoleWrapperSimple(`[Service Worker] DEBUG: ${r}`)}else"info"===e.data?(consoleWrapperSimple(`[Service Worker] Base domain: ${baseDomain}`),consoleWrapperSimple(`[Service Worker] Cache name: ${cacheName}`),consoleWrapperSimple("[Service Worker] Cache version: 46"),consoleWrapperSimple(`[Service Worker] Full cache name: ${fullCacheName}`),consoleWrapperSimple(`[Service Worker] Manifest: ${baseDomain}/sainternet.webmanifest`),consoleWrapperSimple(`[Service Worker] Service worker: ${baseDomain}/serviceworker.min.js`)):"ping"===e.data&&consoleWrapperSimple("[Service Worker] Pong")});
