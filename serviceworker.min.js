const baseDomain="https://sainternet.xyz",shortName="sainternet",cacheVersionPrefix="_v",cacheVersion="52",cacheName=`${shortName}_v52`,htmlCritical=[`${baseDomain}/`,`${baseDomain}/filtereddns.html`,`${baseDomain}/newsandupdates.html`,`${baseDomain}/pokedexoverdns.html`,`${baseDomain}/projects.html`,],cssCritical=[`${baseDomain}/resources/fontawesome-free-6.3.0-web/css/brands.min.css`,`${baseDomain}/resources/fontawesome-free-6.3.0-web/css/fontawesome.min.css`,`${baseDomain}/resources/fontawesome-free-6.3.0-web/css/solid.min.css`,`${baseDomain}/resources/stylesheets/ribbons.min.css`,`${baseDomain}/resources/stylesheets/sainternet.min.css`,],jsCritical=[`${baseDomain}/resources/javascript/debug.min.js`,`${baseDomain}/resources/javascript/load_fonts.min.js`,`${baseDomain}/resources/javascript/material.min.js`,`${baseDomain}/resources/javascript/tag_manager.min.js`,`${baseDomain}/resources/javascript/toggle_drawer.min.js`,`${baseDomain}/sainternet.min.js`,],cacheCritical=[...htmlCritical,...cssCritical,...jsCritical,];function consoleWrapper(e,r="log",o=!1){self.DEBUG&&o&&(e=`${new Date().toLocaleString()} - ${e}`),self.DEBUG&&"object"==typeof console&&"function"==typeof console[r]&&console[r](e)}function consoleWrapperSimple(e,r="log"){"object"==typeof console&&"function"==typeof console[r]&&console[r](e)}function cacheUrls(e){return caches.open(cacheName).then(function(r){return Promise.all(e.map(function(e){return fetch(e).then(function(o){return o.ok||consoleWrapper(`[Service Worker] Failed to cache ${e}: ${o.status}`,"error"),r.put(e,o)}).then(function(){consoleWrapper(`[Service Worker] Cached ${e}: ${response.status}`)})}))})}self.addEventListener("install",function(e){consoleWrapper(`[Service Worker] Event: install ${shortName}`);try{e.waitUntil(cacheUrls(cacheCritical).then(function(){return consoleWrapper("[Service Worker] Finished caching critical assets"),self.skipWaiting()}).catch(function(e){consoleWrapper(`[Service Worker] Error during cache fetch: ${e}`,"error")}))}catch(r){consoleWrapper(`[Service Worker] Error during install event: ${r}`,"error")}}),self.addEventListener("activate",function(e){consoleWrapper(`[Service Worker] Event: activate ${shortName}`);try{self.clients&&clients.claim&&(consoleWrapper("[Service Worker] Claiming available clients"),clients.claim()),e.waitUntil(caches.keys().then(function(e){let r=e.filter(function(e){return e.indexOf(shortName)});return consoleWrapper(`[Service Worker] Whitelisting current cache: ${cacheName}`),r.push(cacheName),self.registration.navigationPreload&&(consoleWrapper("[Service Worker] Enabling service worker navigation preload"),self.registration.navigationPreload.enable()),Promise.all(e.map(function(o,n){if(-1===r.indexOf(o))return consoleWrapper(`[Service Worker] Deleting orphaned cache: ${e[n]}`),caches.delete(e[n])}))}))}catch(r){consoleWrapper(`[Service Worker] Error during activate event: ${r}`,"error")}}),self.addEventListener("fetch",function(e){try{if("GET"!==e.request.method){consoleWrapper(`[Service Worker] Not handling request ${e.request.url} with method ${e.request.method}`);return}let r=new URL(e.request.url);if(![baseDomain,"https://fonts.googleapis.com","https://fonts.gstatic.com",].some(e=>r.origin.startsWith(e)))return fetch(e.request);e.respondWith(caches.match(e.request).then(function(r){return r?(consoleWrapper(`[Service Worker] Returning response from cache: ${e.request.url}`),r):(consoleWrapper(`[Service Worker] Fetching from network: ${e.request.url}`),fetch(e.request).then(function(r){if(!r||200!==r.status||"basic"!==r.type)return consoleWrapper(`[Service Worker] Response not eligible for caching: ${e.request.url}`),r;let o=r.clone();return caches.open(cacheName).then(function(r){consoleWrapper(`[Service Worker] Adding response to cache: ${e.request.url}`),r.put(e.request,o)}),consoleWrapper(`[Service Worker] Returning response from network: ${e.request.url}`),r}))}))}catch(o){consoleWrapper(`[Service Worker] Error during fetch event: ${o}`,"error")}}),self.addEventListener("onupdatefound",function(e){consoleWrapper("[Service Worker] Service worker update found")}),self.addEventListener("controllerchange",function(e){consoleWrapper("[Service Worker] Service worker controller changed")}),self.addEventListener("message",function(e){if("debug"===e.data.type){let r=e.data.value;self.DEBUG=r,consoleWrapperSimple(`[Service Worker] DEBUG: ${r}`)}else"info"===e.data?(consoleWrapperSimple(`[Service Worker] Name: ${shortName}`),consoleWrapperSimple("[Service Worker] Cache version: 52"),consoleWrapperSimple(`[Service Worker] Cache name: ${cacheName}`),consoleWrapperSimple(`[Service Worker] Scope: ${baseDomain}`),consoleWrapperSimple(`[Service Worker] Service worker: ${baseDomain}/serviceworker.min.js`)):"ping"===e.data&&consoleWrapperSimple("[Service Worker] Pong")});
